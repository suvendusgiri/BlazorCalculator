#pragma checksum "E:\PracticeProjects\blazor\demo1\demo1\demo1\Pages\Calculator.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "494f6ef23d65bfa2bd062d266fe91c0cc9feac49"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace demo1.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using demo1;
    using demo1.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/calculator")]
    public class Calculator : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 47 "E:\PracticeProjects\blazor\demo1\demo1\demo1\Pages\Calculator.cshtml"
                
    string inputDisplay = "";
    bool isResult = false;
    readonly char[] numbers = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    readonly char[] symbols = { '/', 'X', '+', '-', '%', '.' };


    void ClearDisplay()
    {
        inputDisplay = string.Empty;
    }

    void AppendInput(string inputValue)
    {
        double numValue;
        //disallow consecutive operators
        if (!double.TryParse(inputValue, out numValue) && inputDisplay.Substring(inputDisplay.Length - 1).IndexOfAny(symbols) != -1)
        {
            return;
        }
        //disallow mutiple 0s
        if (inputDisplay.Trim() == "0" && inputValue == "0")
        {
            return;
        }
        //disallow multiple decimal points for single input
        //disallow 0 as input

        if (isResult & double.TryParse(inputValue, out numValue))
        {
            inputDisplay = inputValue;

        }
        else
        {
            inputDisplay += inputValue;
        }
        isResult = false;
    }

    void EvaluateExpression()
    {

        string valueToEvaluate = inputDisplay.Replace('X', '*');
        System.Data.DataTable dataTable = new System.Data.DataTable();
        var finalResult = dataTable.Compute(valueToEvaluate, "");
        inputDisplay = finalResult.ToString();
        isResult = true;
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
